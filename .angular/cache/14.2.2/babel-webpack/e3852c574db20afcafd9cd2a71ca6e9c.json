{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/WebDev/dfproject/gp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  optimize(compiler, compilation, assets, optimizeOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const cache = compilation.getCache(\"TerserWebpackPlugin\");\n      let numberOfAssets = 0;\n      const assetsForMinify = yield Promise.all(Object.keys(assets).filter(name => {\n        const {\n          info\n        } =\n        /** @type {Asset} */\n        compilation.getAsset(name);\n\n        if ( // Skip double minimize assets from child compilation\n        info.minimized || // Skip minimizing for extracted comments assets\n        info.extractedComments) {\n          return false;\n        }\n\n        if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n        undefined, _this.options)(name)) {\n          return false;\n        }\n\n        return true;\n      }).map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (name) {\n          const {\n            info,\n            source\n          } =\n          /** @type {Asset} */\n          compilation.getAsset(name);\n          const eTag = cache.getLazyHashedEtag(source);\n          const cacheItem = cache.getItemCache(name, eTag);\n          const output = yield cacheItem.getPromise();\n\n          if (!output) {\n            numberOfAssets += 1;\n          }\n\n          return {\n            name,\n            info,\n            inputSource: source,\n            output,\n            cacheItem\n          };\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n\n      if (assetsForMinify.length === 0) {\n        return;\n      }\n      /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n      let getWorker;\n      /** @type {undefined | MinimizerWorker<T>} */\n\n      let initializedWorker;\n      /** @type {undefined | number} */\n\n      let numberOfWorkers;\n\n      if (optimizeOptions.availableNumberOfCores > 0) {\n        // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n        numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n        getWorker = () => {\n          if (initializedWorker) {\n            return initializedWorker;\n          }\n\n          initializedWorker =\n          /** @type {MinimizerWorker<T>} */\n          new Worker(require.resolve(\"./minify\"), {\n            numWorkers: numberOfWorkers,\n            enableWorkerThreads: true\n          }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n          const workerStdout = initializedWorker.getStdout();\n\n          if (workerStdout) {\n            workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n          }\n\n          const workerStderr = initializedWorker.getStderr();\n\n          if (workerStderr) {\n            workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n          }\n\n          return initializedWorker;\n        };\n      }\n\n      const {\n        SourceMapSource,\n        ConcatSource,\n        RawSource\n      } = compiler.webpack.sources;\n      /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n      /** @type {Map<string, ExtractedCommentsInfo>} */\n\n      const allExtractedComments = new Map();\n      const scheduledTasks = [];\n\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push( /*#__PURE__*/_asyncToGenerator(function* () {\n          const {\n            name,\n            inputSource,\n            info,\n            cacheItem\n          } = asset;\n          let {\n            output\n          } = asset;\n\n          if (!output) {\n            let input;\n            /** @type {SourceMapInput | undefined} */\n\n            let inputSourceMap;\n            const {\n              source: sourceFromInputSource,\n              map\n            } = inputSource.sourceAndMap();\n            input = sourceFromInputSource;\n\n            if (map) {\n              if (!TerserPlugin.isSourceMap(map)) {\n                compilation.warnings.push(\n                /** @type {WebpackError} */\n                new Error(`${name} contains invalid source map`));\n              } else {\n                inputSourceMap =\n                /** @type {SourceMapInput} */\n                map;\n              }\n            }\n\n            if (Buffer.isBuffer(input)) {\n              input = input.toString();\n            }\n            /**\n             * @type {InternalOptions<T>}\n             */\n\n\n            const options = {\n              name,\n              input,\n              inputSourceMap,\n              minimizer: {\n                implementation: _this.options.minimizer.implementation,\n                // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n                options: { ..._this.options.minimizer.options\n                }\n              },\n              extractComments: _this.options.extractComments\n            };\n\n            if (typeof options.minimizer.options.module === \"undefined\") {\n              if (typeof info.javascriptModule !== \"undefined\") {\n                options.minimizer.options.module = info.javascriptModule;\n              } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                options.minimizer.options.module = true;\n              } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                options.minimizer.options.module = false;\n              }\n            }\n\n            if (typeof options.minimizer.options.ecma === \"undefined\") {\n              options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n            }\n\n            try {\n              output = yield getWorker ? getWorker().transform(serialize(options)) : minify(options);\n            } catch (error) {\n              const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n              compilation.errors.push(\n              /** @type {WebpackError} */\n              TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap(\n              /** @type {SourceMapInput} */\n              inputSourceMap) : // eslint-disable-next-line no-undefined\n              undefined, // eslint-disable-next-line no-undefined\n              hasSourceMap ? compilation.requestShortener : undefined));\n              return;\n            }\n\n            if (typeof output.code === \"undefined\") {\n              compilation.errors.push(\n              /** @type {WebpackError} */\n              new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n              return;\n            }\n\n            if (output.warnings && output.warnings.length > 0) {\n              output.warnings = output.warnings.map(\n              /**\n               * @param {Error | string} item\n               */\n              item => TerserPlugin.buildWarning(item, name));\n            }\n\n            if (output.errors && output.errors.length > 0) {\n              const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n              output.errors = output.errors.map(\n              /**\n               * @param {Error | string} item\n               */\n              item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap(\n              /** @type {SourceMapInput} */\n              inputSourceMap) : // eslint-disable-next-line no-undefined\n              undefined, // eslint-disable-next-line no-undefined\n              hasSourceMap ? compilation.requestShortener : undefined));\n            }\n\n            let shebang;\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            _this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n              const firstNewlinePosition = output.code.indexOf(\"\\n\");\n              shebang = output.code.substring(0, firstNewlinePosition);\n              output.code = output.code.substring(firstNewlinePosition + 1);\n            }\n\n            if (output.map) {\n              output.source = new SourceMapSource(output.code, name, output.map, input,\n              /** @type {SourceMapInput} */\n              inputSourceMap, true);\n            } else {\n              output.source = new RawSource(output.code);\n            }\n\n            if (output.extractedComments && output.extractedComments.length > 0) {\n              const commentsFilename =\n              /** @type {ExtractCommentsObject} */\n              _this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n              let query = \"\";\n              let filename = name;\n              const querySplit = filename.indexOf(\"?\");\n\n              if (querySplit >= 0) {\n                query = filename.slice(querySplit);\n                filename = filename.slice(0, querySplit);\n              }\n\n              const lastSlashIndex = filename.lastIndexOf(\"/\");\n              const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n              const data = {\n                filename,\n                basename,\n                query\n              };\n              output.commentsFilename = compilation.getPath(commentsFilename, data);\n              let banner; // Add a banner to the original file\n\n              if (\n              /** @type {ExtractCommentsObject} */\n              _this.options.extractComments.banner !== false) {\n                banner =\n                /** @type {ExtractCommentsObject} */\n                _this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n                if (typeof banner === \"function\") {\n                  banner = banner(output.commentsFilename);\n                }\n\n                if (banner) {\n                  output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n                }\n              }\n\n              const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n              output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n            }\n\n            yield cacheItem.storePromise({\n              source: output.source,\n              errors: output.errors,\n              warnings: output.warnings,\n              commentsFilename: output.commentsFilename,\n              extractedCommentsSource: output.extractedCommentsSource\n            });\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            for (const warning of output.warnings) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              warning);\n            }\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            for (const error of output.errors) {\n              compilation.errors.push(\n              /** @type {WebpackError} */\n              error);\n            }\n          }\n          /** @type {Record<string, any>} */\n\n\n          const newInfo = {\n            minimized: true\n          };\n          const {\n            source,\n            extractedCommentsSource\n          } = output; // Write extracted comments to commentsFilename\n\n          if (extractedCommentsSource) {\n            const {\n              commentsFilename\n            } = output;\n            newInfo.related = {\n              license: commentsFilename\n            };\n            allExtractedComments.set(name, {\n              extractedCommentsSource,\n              commentsFilename\n            });\n          }\n\n          compilation.updateAsset(name, source, newInfo);\n        }));\n      }\n\n      const limit = getWorker && numberOfAssets > 0 ?\n      /** @type {number} */\n      numberOfWorkers : scheduledTasks.length;\n      yield throttleAll(limit, scheduledTasks);\n\n      if (initializedWorker) {\n        yield initializedWorker.end();\n      }\n      /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n      yield Array.from(allExtractedComments).sort().reduce(\n      /*#__PURE__*/\n\n      /**\n       * @param {Promise<unknown>} previousPromise\n       * @param {[string, ExtractedCommentsInfo]} extractedComments\n       * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n       */\n      function () {\n        var _ref3 = _asyncToGenerator(function* (previousPromise, [from, value]) {\n          const previous =\n          /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n          yield previousPromise;\n          const {\n            commentsFilename,\n            extractedCommentsSource\n          } = value;\n\n          if (previous && previous.commentsFilename === commentsFilename) {\n            const {\n              from: previousFrom,\n              source: prevSource\n            } = previous;\n            const mergedName = `${previousFrom}|${from}`;\n            const name = `${commentsFilename}|${mergedName}`;\n            const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n            let source = yield cache.getPromise(name, eTag);\n\n            if (!source) {\n              source = new ConcatSource(Array.from(new Set([...\n              /** @type {string}*/\n              prevSource.source().split(\"\\n\\n\"), ...\n              /** @type {string}*/\n              extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n              yield cache.storePromise(name, eTag, source);\n            }\n\n            compilation.updateAsset(commentsFilename, source);\n            return {\n              source,\n              commentsFilename,\n              from: mergedName\n            };\n          }\n\n          const existingAsset = compilation.getAsset(commentsFilename);\n\n          if (existingAsset) {\n            return {\n              source: existingAsset.source,\n              commentsFilename,\n              from: commentsFilename\n            };\n          }\n\n          compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n            extractedComments: true\n          });\n          return {\n            source: extractedCommentsSource,\n            commentsFilename,\n            from\n          };\n        });\n\n        return function (_x2, _x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      /** @type {Promise<unknown>} */\n      Promise.resolve());\n    })();\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"names":["path","require","os","TraceMap","originalPositionFor","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","green","formatFlag","exports"],"sources":["D:/WebDev/dfproject/gp/node_modules/terser-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {SourceMapInput} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {SourceMapInput} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script"}