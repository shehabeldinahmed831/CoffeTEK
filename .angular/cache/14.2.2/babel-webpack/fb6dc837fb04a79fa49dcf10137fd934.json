{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\n\nvar _asyncToGenerator = require(\"D:/WebDev/dfproject/gp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(\n        /** @type{T[]} **/\n        result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nfunction terserMinify(_x, _x2, _x3, _x4) {\n  return _terserMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\n\n\nfunction _terserMinify() {\n  _terserMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions, extractComments) {\n    /**\n     * @param {any} value\n     * @returns {boolean}\n     */\n    const isObject = value => {\n      const type = typeof value;\n      return value != null && (type === \"object\" || type === \"function\");\n    };\n    /**\n     * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n     * @param {ExtractedComments} extractedComments\n     * @returns {ExtractCommentsFunction}\n     */\n\n\n    const buildComments = (terserOptions, extractedComments) => {\n      /** @type {{ [index: string]: ExtractCommentsCondition }} */\n      const condition = {};\n      let comments;\n\n      if (terserOptions.format) {\n        ({\n          comments\n        } = terserOptions.format);\n      } else if (terserOptions.output) {\n        ({\n          comments\n        } = terserOptions.output);\n      }\n\n      condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n      if (typeof extractComments === \"boolean\" && extractComments) {\n        condition.extract = \"some\";\n      } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n        condition.extract = extractComments;\n      } else if (typeof extractComments === \"function\") {\n        condition.extract = extractComments;\n      } else if (extractComments && isObject(extractComments)) {\n        condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n      } else {\n        // No extract\n        // Preserve using \"commentsOpts\" or \"some\"\n        condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n        condition.extract = false;\n      } // Ensure that both conditions are functions\n\n\n      [\"preserve\", \"extract\"].forEach(key => {\n        /** @type {undefined | string} */\n        let regexStr;\n        /** @type {undefined | RegExp} */\n\n        let regex;\n\n        switch (typeof condition[key]) {\n          case \"boolean\":\n            condition[key] = condition[key] ? () => true : () => false;\n            break;\n\n          case \"function\":\n            break;\n\n          case \"string\":\n            if (condition[key] === \"all\") {\n              condition[key] = () => true;\n\n              break;\n            }\n\n            if (condition[key] === \"some\") {\n              condition[key] =\n              /** @type {ExtractCommentsFunction} */\n              (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n              break;\n            }\n\n            regexStr =\n            /** @type {string} */\n            condition[key];\n\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => new RegExp(\n            /** @type {string} */\n            regexStr).test(comment.value);\n\n            break;\n\n          default:\n            regex =\n            /** @type {RegExp} */\n            condition[key];\n\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) =>\n            /** @type {RegExp} */\n            regex.test(comment.value);\n\n        }\n      }); // Redefine the comments function to extract and preserve\n      // comments according to the two conditions\n\n      return (astNode, comment) => {\n        if (\n        /** @type {{ extract: ExtractCommentsFunction }} */\n        condition.extract(astNode, comment)) {\n          const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n          if (!extractedComments.includes(commentText)) {\n            extractedComments.push(commentText);\n          }\n        }\n\n        return (\n          /** @type {{ preserve: ExtractCommentsFunction }} */\n          condition.preserve(astNode, comment)\n        );\n      };\n    };\n    /**\n     * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n     * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n     */\n\n\n    const buildTerserOptions = (terserOptions = {}) => {\n      // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n      return { ...terserOptions,\n        compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : { ...terserOptions.compress\n        },\n        // ecma: terserOptions.ecma,\n        // ie8: terserOptions.ie8,\n        // keep_classnames: terserOptions.keep_classnames,\n        // keep_fnames: terserOptions.keep_fnames,\n        mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : { ...terserOptions.mangle\n        },\n        // module: terserOptions.module,\n        // nameCache: { ...terserOptions.toplevel },\n        // the `output` option is deprecated\n        ...(terserOptions.format ? {\n          format: {\n            beautify: false,\n            ...terserOptions.format\n          }\n        } : {\n          output: {\n            beautify: false,\n            ...terserOptions.output\n          }\n        }),\n        parse: { ...terserOptions.parse\n        },\n        // safari10: terserOptions.safari10,\n        // Ignoring sourceMap from options\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined // toplevel: terserOptions.toplevel\n\n      };\n    }; // eslint-disable-next-line global-require\n\n\n    const {\n      minify\n    } = require(\"terser\"); // Copy `terser` options\n\n\n    const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      terserOptions.sourceMap = {\n        asObject: true\n      };\n    }\n    /** @type {ExtractedComments} */\n\n\n    const extractedComments = [];\n\n    if (terserOptions.output) {\n      terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n    } else if (terserOptions.format) {\n      terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n    }\n\n    if (terserOptions.compress) {\n      // More optimizations\n      if (typeof terserOptions.compress.ecma === \"undefined\") {\n        terserOptions.compress.ecma = terserOptions.ecma;\n      } // https://github.com/webpack/webpack/issues/16135\n\n\n      if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n        terserOptions.compress.arrows = false;\n      }\n    }\n\n    const [[filename, code]] = Object.entries(input);\n    const result = yield minify({\n      [filename]: code\n    }, terserOptions);\n    return {\n      code:\n      /** @type {string} **/\n      result.code,\n      // @ts-ignore\n      // eslint-disable-next-line no-undefined\n      map: result.map ?\n      /** @type {SourceMapInput} **/\n      result.map : undefined,\n      extractedComments\n    };\n  });\n  return _terserMinify.apply(this, arguments);\n}\n\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nfunction uglifyJsMinify(_x5, _x6, _x7, _x8) {\n  return _uglifyJsMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\n\n\nfunction _uglifyJsMinify() {\n  _uglifyJsMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions, extractComments) {\n    /**\n     * @param {any} value\n     * @returns {boolean}\n     */\n    const isObject = value => {\n      const type = typeof value;\n      return value != null && (type === \"object\" || type === \"function\");\n    };\n    /**\n     * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n     * @param {ExtractedComments} extractedComments\n     * @returns {ExtractCommentsFunction}\n     */\n\n\n    const buildComments = (uglifyJsOptions, extractedComments) => {\n      /** @type {{ [index: string]: ExtractCommentsCondition }} */\n      const condition = {};\n      const {\n        comments\n      } = uglifyJsOptions.output;\n      condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n      if (typeof extractComments === \"boolean\" && extractComments) {\n        condition.extract = \"some\";\n      } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n        condition.extract = extractComments;\n      } else if (typeof extractComments === \"function\") {\n        condition.extract = extractComments;\n      } else if (extractComments && isObject(extractComments)) {\n        condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n      } else {\n        // No extract\n        // Preserve using \"commentsOpts\" or \"some\"\n        condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n        condition.extract = false;\n      } // Ensure that both conditions are functions\n\n\n      [\"preserve\", \"extract\"].forEach(key => {\n        /** @type {undefined | string} */\n        let regexStr;\n        /** @type {undefined | RegExp} */\n\n        let regex;\n\n        switch (typeof condition[key]) {\n          case \"boolean\":\n            condition[key] = condition[key] ? () => true : () => false;\n            break;\n\n          case \"function\":\n            break;\n\n          case \"string\":\n            if (condition[key] === \"all\") {\n              condition[key] = () => true;\n\n              break;\n            }\n\n            if (condition[key] === \"some\") {\n              condition[key] =\n              /** @type {ExtractCommentsFunction} */\n              (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n              break;\n            }\n\n            regexStr =\n            /** @type {string} */\n            condition[key];\n\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => new RegExp(\n            /** @type {string} */\n            regexStr).test(comment.value);\n\n            break;\n\n          default:\n            regex =\n            /** @type {RegExp} */\n            condition[key];\n\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) =>\n            /** @type {RegExp} */\n            regex.test(comment.value);\n\n        }\n      }); // Redefine the comments function to extract and preserve\n      // comments according to the two conditions\n\n      return (astNode, comment) => {\n        if (\n        /** @type {{ extract: ExtractCommentsFunction }} */\n        condition.extract(astNode, comment)) {\n          const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n          if (!extractedComments.includes(commentText)) {\n            extractedComments.push(commentText);\n          }\n        }\n\n        return (\n          /** @type {{ preserve: ExtractCommentsFunction }} */\n          condition.preserve(astNode, comment)\n        );\n      };\n    };\n    /**\n     * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n     * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n     */\n\n\n    const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n      // eslint-disable-next-line no-param-reassign\n      delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n      delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n      return { ...uglifyJsOptions,\n        // warnings: uglifyJsOptions.warnings,\n        parse: { ...uglifyJsOptions.parse\n        },\n        compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : { ...uglifyJsOptions.compress\n        },\n        mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : { ...uglifyJsOptions.mangle\n        },\n        output: {\n          beautify: false,\n          ...uglifyJsOptions.output\n        },\n        // Ignoring sourceMap from options\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n        // nameCache: { ...uglifyJsOptions.toplevel },\n        // ie8: uglifyJsOptions.ie8,\n        // keep_fnames: uglifyJsOptions.keep_fnames,\n\n      };\n    }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n\n    const {\n      minify\n    } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n\n    const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      uglifyJsOptions.sourceMap = true;\n    }\n    /** @type {ExtractedComments} */\n\n\n    const extractedComments = []; // @ts-ignore\n\n    uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n    const [[filename, code]] = Object.entries(input);\n    const result = yield minify({\n      [filename]: code\n    }, uglifyJsOptions);\n    return {\n      code: result.code,\n      // eslint-disable-next-line no-undefined\n      map: result.map ? JSON.parse(result.map) : undefined,\n      errors: result.error ? [result.error] : [],\n      warnings: result.warnings || [],\n      extractedComments\n    };\n  });\n  return _uglifyJsMinify.apply(this, arguments);\n}\n\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nfunction swcMinify(_x9, _x10, _x11) {\n  return _swcMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\n\n\nfunction _swcMinify() {\n  _swcMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions) {\n    /**\n     * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n     * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n     */\n    const buildSwcOptions = (swcOptions = {}) => {\n      // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n      return { ...swcOptions,\n        compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : { ...swcOptions.compress\n        },\n        mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : { ...swcOptions.mangle\n        },\n        // ecma: swcOptions.ecma,\n        // keep_classnames: swcOptions.keep_classnames,\n        // keep_fnames: swcOptions.keep_fnames,\n        // module: swcOptions.module,\n        // safari10: swcOptions.safari10,\n        // toplevel: swcOptions.toplevel\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined\n      };\n    }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n    const swc = require(\"@swc/core\"); // Copy `swc` options\n\n\n    const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      swcOptions.sourceMap = true;\n    }\n\n    if (swcOptions.compress) {\n      // More optimizations\n      if (typeof swcOptions.compress.ecma === \"undefined\") {\n        swcOptions.compress.ecma = swcOptions.ecma;\n      } // https://github.com/webpack/webpack/issues/16135\n\n\n      if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n        swcOptions.compress.arrows = false;\n      }\n    }\n\n    const [[filename, code]] = Object.entries(input);\n    const result = yield swc.minify(code, swcOptions);\n    let map;\n\n    if (result.map) {\n      map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n      map.sources = [filename];\n      delete map.sourcesContent;\n    }\n\n    return {\n      code: result.code,\n      map\n    };\n  });\n  return _swcMinify.apply(this, arguments);\n}\n\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nfunction esbuildMinify(_x12, _x13, _x14) {\n  return _esbuildMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\n\n\nfunction _esbuildMinify() {\n  _esbuildMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions) {\n    /**\n     * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n     * @returns {import(\"esbuild\").TransformOptions}\n     */\n    const buildEsbuildOptions = (esbuildOptions = {}) => {\n      // eslint-disable-next-line no-param-reassign\n      delete esbuildOptions.ecma;\n\n      if (esbuildOptions.module) {\n        // eslint-disable-next-line no-param-reassign\n        esbuildOptions.format = \"esm\";\n      } // eslint-disable-next-line no-param-reassign\n\n\n      delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n      return {\n        minify: true,\n        legalComments: \"inline\",\n        ...esbuildOptions,\n        sourcemap: false\n      };\n    }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n    const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n    const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n    if (sourceMap) {\n      esbuildOptions.sourcemap = true;\n      esbuildOptions.sourcesContent = false;\n    }\n\n    const [[filename, code]] = Object.entries(input);\n    esbuildOptions.sourcefile = filename;\n    const result = yield esbuild.transform(code, esbuildOptions);\n    return {\n      code: result.code,\n      // eslint-disable-next-line no-undefined\n      map: result.map ? JSON.parse(result.map) : undefined,\n      warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n        return {\n          name: \"Warning\",\n          source: item.location && item.location.file,\n          line: item.location && item.location.line,\n          column: item.location && item.location.column,\n          plugin: item.pluginName,\n          message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n        };\n      }) : []\n    };\n  });\n  return _esbuildMinify.apply(this, arguments);\n}\n\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};","map":{"version":3,"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","terserMinify","input","sourceMap","minimizerOptions","extractComments","isObject","type","buildComments","terserOptions","extractedComments","condition","comments","format","output","preserve","extract","RegExp","key","regexStr","regex","astNode","comment","test","commentText","push","buildTerserOptions","compress","mangle","beautify","parse","undefined","minify","require","asObject","ecma","arrows","filename","code","Object","map","getMinimizerVersion","packageJson","error","version","uglifyJsMinify","uglifyJsOptions","buildUglifyJsOptions","module","JSON","errors","warnings","swcMinify","buildSwcOptions","swcOptions","swc","sources","sourcesContent","esbuildMinify","buildEsbuildOptions","esbuildOptions","legalComments","sourcemap","esbuild","sourcefile","transform","item","name","source","location","file","line","column","plugin","pluginName","message","text","detail","notes","note","suggestion","lineText","join","exports"],"sources":["D:/WebDev/dfproject/gp/node_modules/terser-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(\n        /** @type{T[]} **/\n        result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n\n\n  const buildTerserOptions = (terserOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : { ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : { ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: { ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: terserOptions.toplevel\n\n    };\n  }; // eslint-disable-next-line global-require\n\n\n  const {\n    minify\n  } = require(\"terser\"); // Copy `terser` options\n\n\n  const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = [];\n\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n\n  if (terserOptions.compress) {\n    // More optimizations\n    if (typeof terserOptions.compress.ecma === \"undefined\") {\n      terserOptions.compress.ecma = terserOptions.ecma;\n    } // https://github.com/webpack/webpack/issues/16135\n\n\n    if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n      terserOptions.compress.arrows = false;\n    }\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code:\n    /** @type {string} **/\n    result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ?\n    /** @type {SourceMapInput} **/\n    result.map : undefined,\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n\n\n  const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n    delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return { ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: { ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : { ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : { ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n\n    };\n  }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n\n  const {\n    minify\n  } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = []; // @ts-ignore\n\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n   */\n  const buildSwcOptions = (swcOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : { ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : { ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const swc = require(\"@swc/core\"); // Copy `swc` options\n\n\n  const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n\n  if (swcOptions.compress) {\n    // More optimizations\n    if (typeof swcOptions.compress.ecma === \"undefined\") {\n      swcOptions.compress.ecma = swcOptions.ecma;\n    } // https://github.com/webpack/webpack/issues/16135\n\n\n    if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n      swcOptions.compress.arrows = false;\n    }\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n\n  if (result.map) {\n    map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n\n  return {\n    code: result.code,\n    map\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    } // eslint-disable-next-line no-param-reassign\n\n\n    delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        name: \"Warning\",\n        source: item.location && item.location.file,\n        line: item.location && item.location.line,\n        column: item.location && item.location.column,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}